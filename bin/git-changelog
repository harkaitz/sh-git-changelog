#!/bin/sh -e
##:
#h: Usage: git-changelog { -V | -a (add) | -c (close) | -u (update) }
#h:
#h: Program for automatically filling the changelog from git-task(1)
#h: tasks. The format of the changelog is as follows:
#h:   __________________________________
#h:  | YYYY-MM-DD  VERSION  TEXT (open) | * The updated section is 
#h:  |                                  |   the last one with (open).
#h:  | [ tab  ]- (@CODE) MESSAGE        | 
#h:  | [ tab  ]- (@CODE) MESSAGE        | * The version or an open section
#h:  | ...                              |   matches the version in the makefile.
#h:  |__________________________________|
#h:
#h: Tasks that contain "Changelog" with the same project name in the
#h: makefile and that are "@done" are selected. Move to @closed once
#h: the release is done.
##:
. wds_nextver
git_changelog() {
    local ops=
    case "$1" in -*) ops="$1"; shift ;; esac
    case "$ops" in -*a*) git_changelog_add "$@" ;; esac
    case "$ops" in -*u*) git_changelog_update "$@" ;; esac
    case "$ops" in -*c*) git_changelog_close "$@" ;; esac
}
git_changelog_show_variables() {
    local last_section_version
    local makefile_project
    local makefile_version
    git_changelog_get__last_section_version
    git_changelog_get__makefile_project
    git_changelog_get__makefile_version
    cat <<-EOF
	CHANGELOG : ${CHANGELOG}
	Last section version : ${last_section_version}
	Makefile project : ${makefile_project}
	Makefile version : ${makefile_version}
	EOF
}
git_changelog_calc_variables() {
    local c
    if test ! -n "${CHANGELOG}"; then
        for c in CHANGELOG.md CHANGELOG; do
            if test -f "$c"; then
                CHANGELOG="${c}"
            fi
        done
        CHANGELOG="CHANGELOG.md"
    fi
}
# --------------------------------------------------------------------
git_changelog_add() {
    local last_section_version makefile_version date
    touch "${CHANGELOG}"
    git_changelog_get__last_section_version
    if test -n "${last_section_version}"; then
        echo >&2 "error: ${CHANGELOG}: Already a section is open (${last_section_version})."
        return 1
    fi
    git_changelog_get__makefile_version
    if git_changelog_has_version "${makefile_version}"; then
        echo >&2 "error: ${CHANGELOG}: Version ${makefile_version} found, increase version with \`wds_nextver -Mmp\`."
        return 1
    fi
    date="$(date +%Y-%m-%d)"
    sed -i "1i${date}  ${makefile_version}  New version. (open)" "${CHANGELOG}"
}
git_changelog_update() {
    local makefile_project tmp
    git_changelog_check
    git_changelog_get__makefile_project
    ## Create section.
    tmp="$(mktemp)" date="$(date +%Y-%m-%d)"
    echo > "${tmp}"
    git task changelog "${makefile_project}" | sed 's|^|	|' >> "${tmp}"
    echo >> "${tmp}"
    ## Update in changelog.
    sed -i '
        /^....-..-..  *.*(open).*/,/^....-..-..  */{
            /(open)/s/^....-..-../'"${date}"'/
            /^....-.*(open)/r '"${tmp}"'
            /^ *$/d
            /^	/d
        }
    ' "${CHANGELOG}"
}
git_changelog_close() {
    git_changelog_check
    sed -i 's| *(open)||' "${CHANGELOG}"
}
# --------------------------------------------------------------------
git_changelog_check() {
    local last_section_version makefile_version 
    if test ! -f "${CHANGELOG}"; then
        echo >&2 "error: ${CHANGELOG}: File not found."
        return 1
    fi
    git_changelog_get__last_section_version
    if test ! -n "${last_section_version}"; then
        echo >&2 "error: ${CHANGELOG}: No open section."
        return 1
    fi
    git_changelog_get__makefile_version
    if test ! @"${last_section_version}" = @"${makefile_version}"; then
        echo >&2 "error: Last section version (${last_section_version}) doesn't match makefile version (${makefile_version})."
        return 1
    fi
}
# --------------------------------------------------------------------
git_changelog_get__makefile_version() {
    local VERSION
    wds_nextver_get_VERSION
    if test ! -n "${VERSION}"; then
        echo >&2 "error: Can't get version from makefile."
        return 1
    fi
    makefile_version="${VERSION}"
}
git_changelog_get__makefile_project() {
    local PROJECT
    wds_nextver_get_PROJECT
    if test ! -n "${PROJECT}"; then
        PROJECT="$(basename "$(pwd)")"
    fi
    makefile_project="${PROJECT}"
}
git_changelog_get__last_section_version() {
    last_section_version="$(test ! -f "${CHANGELOG}" || sed -n '
        /^....-..-.. .*(open).*/{
            s|^....-..-..  *\([^ ][^ ]*\).*|\1|p
            q
        }
    ' "${CHANGELOG}")"
}
git_changelog_has_version() {
    grep -qxF "$1" <<-EOF
	$(sed -n 's|^....-..-.. *\([^ ][^ ]*\).*|\1|p' "${CHANGELOG}")
	EOF
}
# --------------------------------------------------------------------
git_changelog_calc_variables
if test @"${SCRNAME:-$(basename "$0")}" = @"git-changelog"; then
    case "${1}" in
        ''|-h|--help) sed -n 's/^ *#h: \{0,1\}//p' "$0";;
        -*V*)         git_changelog_show_variables; exit 0;;
        *)            git_changelog "$@"; exit 0;;
    esac
fi
